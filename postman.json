{
	"info": {
		"_postman_id": "b5218893-bb9c-4a17-8d43-09bb498a3c7a",
		"name": "movies",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15363154"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is a valid JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - token\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('token');",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjk0YjZkNjEtYjhhMy00ODNlLTlhZTMtMjg2MDZiNmUyZmUyIiwianRpIjoiYTc2NzkxZmQtMWQ4OS00NDFlLWEzZmItNjBhYTJlNzc3MmMzIiwiZXhwIjoxNzQyNDI3ODAxfQ.asKAbmThUFBysc6PfMfYn81J_BuFm2HAMOgO80KhePU",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/auth/refresh",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Results array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.results).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Total results, total pages, page, and per_page fields are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.total_results).to.exist;",
							"    pm.expect(responseData.total_pages).to.exist;",
							"    pm.expect(responseData.page).to.exist;",
							"    pm.expect(responseData.per_page).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Each movie object in the results array has non-empty id, uuid, title, overview, release_date, original_language, and non-negative score\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.results.forEach(function(movie) {",
							"        pm.expect(movie.id).to.exist.and.to.not.be.empty;",
							"        pm.expect(movie.uuid).to.exist.and.to.not.be.empty;",
							"        pm.expect(movie.title).to.exist.and.to.not.be.empty;",
							"        pm.expect(movie.overview).to.exist.and.to.not.be.empty;",
							"        pm.expect(movie.release_date).to.exist.and.to.not.be.empty;",
							"        pm.expect(movie.original_language).to.exist.and.to.not.be.empty;",
							"        pm.expect(movie.score).to.exist.and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjQ3MjFhMGEtYjlhZS00N2UxLThhZWEtNTEwNWMzNjNiYzIxIiwianRpIjoiMjQ1OTJjN2YtMTMwNy00ZmE3LWE2Y2EtMjM3MzljZjQzMTJhIiwiZXhwIjoxNzQyNDU0ODg4fQ.rwfrP-tF6UGa2oGaQxshpPUEtxH0x6jfpUB_X6ov-Dk",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjk0YjZkNjEtYjhhMy00ODNlLTlhZTMtMjg2MDZiNmUyZmUyIiwianRpIjoiYTc2NzkxZmQtMWQ4OS00NDFlLWEzZmItNjBhYTJlNzc3MmMzIiwiZXhwIjoxNzQyNDI3ODAxfQ.asKAbmThUFBysc6PfMfYn81J_BuFm2HAMOgO80KhePU",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/api/v1/movies?query=forrest&per_page=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"movies"
					],
					"query": [
						{
							"key": "query",
							"value": "forrest"
						},
						{
							"key": "per_page",
							"value": "10"
						}
					]
				}
			},
			"response": []
		}
	]
}
